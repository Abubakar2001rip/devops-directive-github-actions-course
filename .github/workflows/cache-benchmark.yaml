name: Cache Benchmark

on:
  push:
    branches:
      - sp/cache-benchmark
  workflow_dispatch:
    inputs:
      large_size_mb:
        description: "Large file size (MB, random data)"
        default: "2048"
        required: true
      small_count:
        description: "Number of small files"
        default: "100000"
        required: true
      small_size_bytes:
        description: "Size of each small file (bytes, random data)"
        default: "4096"
        required: true
      salt:
        description: "Change to avoid colliding with old keys"
        default: "v1"
        required: true

permissions:
  contents: read
  actions: read

env:
  # Shared dirs
  ROOT_DIR: bench
  # Don’t change: separate subpaths for each cache impl so they don’t interfere.
  ACTIONS_DIR: actions
  NSCLOUD_DIR: nscloud
  LARGE_SIZE_MB: ${{ inputs.large_size_mb || '2048' }}
  SMALL_COUNT: ${{ inputs.small_count || '100000' }}
  SMALL_SIZE_BYTES: ${{ inputs.small_size_bytes || '4096' }}
  SALT: ${{ inputs.salt || 'v2'}}

jobs:
  # --------------------------
  # Scenario A: LARGE FILE
  # --------------------------
  large-prime:
    name: Large (prime/save both caches)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ---------------- GitHub cache (ACTIONS) - save ----------------
      - name: Prepare paths
        run: |
          set -euo pipefail
          mkdir -p "$ROOT_DIR/large/$ACTIONS_DIR" "$ROOT_DIR/large/$NSCLOUD_DIR"
        shell: bash

      - name: Generate large file for ACTIONS cache
        id: gen_actions_large
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/large/$ACTIONS_DIR"
          size_mb="${{ env.LARGE_SIZE_MB }}"
          # Time data generation
          t0=$(date +%s%N)
          dd if=/dev/urandom of="$dir/large.bin" bs=1M count="$size_mb" status=none
          t1=$(date +%s%N)
          printf "gen_ms=%d\n" $(( (t1 - t0)/1000000 )) >> "$GITHUB_OUTPUT"
          du -s --block-size=1 "$dir" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          find "$dir" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Save ACTIONS cache (large)
        id: save_actions_large
        uses: actions/cache/save@v4
        with:
          path: ${{ env.ROOT_DIR }}/large/${{ env.ACTIONS_DIR }}
          key: large-actions-${{ runner.os }}-${{ env.LARGE_SIZE_MB }}mb-${{ env.SALT }}

      # --------------- Namespace cache - save (requires Namespace runner) ---------------
      # We can "prepare" the nscloud cache dir here on ubuntu; the actual cache wiring
      # and persistence happen in the nscloud jobs that run on the Namespace runner.
      - name: Generate large file for NSCLOUD cache (data)
        id: gen_nscloud_large
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/large/$NSCLOUD_DIR"
          size_mb="${{ env.LARGE_SIZE_MB }}"
          t0=$(date +%s%N)
          dd if=/dev/urandom of="$dir/large.bin" bs=1M count="$size_mb" status=none
          t1=$(date +%s%N)
          printf "gen_ms=%d\n" $(( (t1 - t0)/1000000 )) >> "$GITHUB_OUTPUT"
          du -s --block-size=1 "$dir" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          find "$dir" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Upload NSCLOUD-large data for the Namespace job
        uses: actions/upload-artifact@v4
        with:
          name: ns-large-seed
          path: ${{ env.ROOT_DIR }}/large/${{ env.NSCLOUD_DIR }}
          if-no-files-found: error

      - name: Write summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          ### Large (prime)
          - ACTIONS data: ${{ steps.gen_actions_large.outputs.files }} files, ${{ steps.gen_actions_large.outputs.bytes }} bytes, gen: ${{ steps.gen_actions_large.outputs.gen_ms }} ms
          - NSCLOUD data: ${{ steps.gen_nscloud_large.outputs.files }} files, ${{ steps.gen_nscloud_large.outputs.bytes }} bytes, gen: ${{ steps.gen_nscloud_large.outputs.gen_ms }} ms
          - Saved ACTIONS cache key: `large-actions-${{ runner.os }}-${{ env.LARGE_SIZE_MB }}mb-${{ env.SALT }}`
          EOF
        shell: bash

  large-restore-actions:
    name: Large (restore from actions/cache@v4)
    needs: [large-prime]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore ACTIONS cache (large)
        id: restore_actions_large
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.ROOT_DIR }}/large/${{ env.ACTIONS_DIR }}
          key: large-actions-${{ runner.os }}-${{ env.LARGE_SIZE_MB }}mb-${{ env.SALT }}

      - name: Measure ACTIONS restore time (large)
        id: measure_actions_large
        run: |
          set -euo pipefail
          t0=$(date +%s%N)
          # Touch the directory to ensure we measure filesystem readiness.
          test -f "${ROOT_DIR}/large/${ACTIONS_DIR}/large.bin"
          t1=$(date +%s%N)
          du -s --block-size=1 "$ROOT_DIR/large/$ACTIONS_DIR" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          echo "ms=$(( (t1 - t0)/1000000 ))" >> "$GITHUB_OUTPUT"
          find "$ROOT_DIR/large/$ACTIONS_DIR" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Save results
        run: |
          printf '{"scenario":"large","impl":"actions","restore_ms":%s,"files":%s,"bytes":%s}\n' \
            "${{ steps.measure_actions_large.outputs.ms }}" \
            "${{ steps.measure_actions_large.outputs.files }}" \
            "${{ steps.measure_actions_large.outputs.bytes }}" \
            > results-large-actions.json
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: results-large-actions
          path: results-large-actions.json

      - name: Summary
        run: |
          echo "### Large (ACTIONS restore)" >> "$GITHUB_STEP_SUMMARY"
          echo "- cache-hit: ${{ steps.restore_actions_large.outputs.cache-hit }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- restore: ${{ steps.measure_actions_large.outputs.ms }} ms" >> "$GITHUB_STEP_SUMMARY"
        shell: bash

  large-restore-nscloud:
    name: Large (restore from nscloud-cache-action@v1)
    needs: [large-prime]
    # Replace with your Namespace runner profile that has a Cache Volume attached.
    runs-on: namespace-profile-cache-test
    steps:
      - uses: actions/checkout@v4

      # Wire cache volume paths; must run AFTER checkout.
      - name: Set up Namespace cache (large)
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          # We'll mount the cache onto this path; then populate it from the seed artifact.
          path: ${{ env.ROOT_DIR }}/large/${{ env.NSCLOUD_DIR }}

      - name: Download seed artifact and place into nscloud cache path
        uses: actions/download-artifact@v4
        with:
          name: ns-large-seed
          path: ${{ env.ROOT_DIR }}/large/${{ env.NSCLOUD_DIR }}

      - name: Measure NSCLOUD "restore" time (large)
        id: measure_ns_large
        run: |
          set -euo pipefail
          t0=$(date +%s%N)
          test -f "${ROOT_DIR}/large/${NSCLOUD_DIR}/large.bin"
          t1=$(date +%s%N)
          du -s --block-size=1 "$ROOT_DIR/large/$NSCLOUD_DIR" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          echo "ms=$(( (t1 - t0)/1000000 ))" >> "$GITHUB_OUTPUT"
          find "$ROOT_DIR/large/$NSCLOUD_DIR" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Save results
        run: |
          printf '{"scenario":"large","impl":"nscloud","restore_ms":%s,"files":%s,"bytes":%s}\n' \
            "${{ steps.measure_ns_large.outputs.ms }}" \
            "${{ steps.measure_ns_large.outputs.files }}" \
            "${{ steps.measure_ns_large.outputs.bytes }}" \
            > results-large-nscloud.json
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: results-large-nscloud
          path: results-large-nscloud.json

      - name: Summary
        run: |
          echo "### Large (NSCLOUD restore)" >> "$GITHUB_STEP_SUMMARY"
          echo "- restore: ${{ steps.measure_ns_large.outputs.ms }} ms" >> "$GITHUB_STEP_SUMMARY"
        shell: bash

  # --------------------------
  # Scenario B: MANY SMALL FILES
  # --------------------------
  many-prime:
    name: Many files (prime/save both caches)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare paths
        run: |
          set -euo pipefail
          mkdir -p "$ROOT_DIR/many/$ACTIONS_DIR" "$ROOT_DIR/many/$NSCLOUD_DIR"
        shell: bash

      - name: Generate MANY small files for ACTIONS cache
        id: gen_actions_many
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/many/$ACTIONS_DIR"
          count="${{ env.SMALL_COUNT }}"
          size="${{ env.SMALL_SIZE_BYTES }}"
          t0=$(date +%s%N)
          for i in $(seq 1 "$count"); do
            dd if=/dev/urandom of="$dir/file_$i.bin" bs="$size" count=1 status=none
          done
          t1=$(date +%s%N)
          printf "gen_ms=%d\n" $(( (t1 - t0)/1000000 )) >> "$GITHUB_OUTPUT"
          du -s --block-size=1 "$dir" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          find "$dir" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Save ACTIONS cache (many)
        id: save_actions_many
        uses: actions/cache/save@v4
        with:
          path: ${{ env.ROOT_DIR }}/many/${{ env.ACTIONS_DIR }}
          key: many-actions-${{ runner.os }}-${{ env.SMALL_COUNT }}x${{ env.SMALL_SIZE_BYTES }}-${{ env.SALT }}

      - name: Generate MANY small files for NSCLOUD cache (data)
        id: gen_nscloud_many
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/many/$NSCLOUD_DIR"
          count="${{ env.SMALL_COUNT }}"
          size="${{ env.SMALL_SIZE_BYTES }}"
          t0=$(date +%s%N)
          for i in $(seq 1 "$count"); do
            dd if=/dev/urandom of="$dir/file_$i.bin" bs="$size" count=1 status=none
          done
          t1=$(date +%s%N)
          printf "gen_ms=%d\n" $(( (t1 - t0)/1000000 )) >> "$GITHUB_OUTPUT"
          du -s --block-size=1 "$dir" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          find "$dir" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Upload NSCLOUD-many data for the Namespace job
        uses: actions/upload-artifact@v4
        with:
          name: ns-many-seed
          path: ${{ env.ROOT_DIR }}/many/${{ env.NSCLOUD_DIR }}
          if-no-files-found: error

      - name: Write summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          ### Many (prime)
          - ACTIONS data: ${{ steps.gen_actions_many.outputs.files }} files, ${{ steps.gen_actions_many.outputs.bytes }} bytes, gen: ${{ steps.gen_actions_many.outputs.gen_ms }} ms
          - NSCLOUD data: ${{ steps.gen_nscloud_many.outputs.files }} files, ${{ steps.gen_nscloud_many.outputs.bytes }} bytes, gen: ${{ steps.gen_nscloud_many.outputs.gen_ms }} ms
          - Saved ACTIONS cache key: `many-actions-${{ runner.os }}-${{ env.SMALL_COUNT }}x${{ env.SMALL_SIZE_BYTES }}-${{ env.SALT }}`
          EOF
        shell: bash

  many-restore-actions:
    name: Many (restore from actions/cache@v4)
    needs: [many-prime]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore ACTIONS cache (many)
        id: restore_actions_many
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.ROOT_DIR }}/many/${{ env.ACTIONS_DIR }}
          key: many-actions-${{ runner.os }}-${{ env.SMALL_COUNT }}x${{ env.SMALL_SIZE_BYTES }}-${{ env.SALT }}

      - name: Measure ACTIONS restore time (many)
        id: measure_actions_many
        run: |
          set -euo pipefail
          t0=$(date +%s%N)
          # Validate presence
          test "$(find "$ROOT_DIR/many/$ACTIONS_DIR" -type f | wc -l)" -gt 0
          t1=$(date +%s%N)
          du -s --block-size=1 "$ROOT_DIR/many/$ACTIONS_DIR" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          echo "ms=$(( (t1 - t0)/1000000 ))" >> "$GITHUB_OUTPUT"
          find "$ROOT_DIR/many/$ACTIONS_DIR" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Save results
        run: |
          printf '{"scenario":"many","impl":"actions","restore_ms":%s,"files":%s,"bytes":%s}\n' \
            "${{ steps.measure_actions_many.outputs.ms }}" \
            "${{ steps.measure_actions_many.outputs.files }}" \
            "${{ steps.measure_actions_many.outputs.bytes }}" \
            > results-many-actions.json
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: results-many-actions
          path: results-many-actions.json

      - name: Summary
        run: |
          echo "### Many (ACTIONS restore)" >> "$GITHUB_STEP_SUMMARY"
          echo "- cache-hit: ${{ steps.restore_actions_many.outputs.cache-hit }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- restore: ${{ steps.measure_actions_many.outputs.ms }} ms" >> "$GITHUB_STEP_SUMMARY"
        shell: bash

  many-restore-nscloud:
    name: Many (restore from nscloud-cache-action@v1)
    needs: [many-prime]
    runs-on: namespace-profile-cache-test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Namespace cache (many)
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: ${{ env.ROOT_DIR }}/many/${{ env.NSCLOUD_DIR }}

      - name: Download seed artifact and place into nscloud cache path
        uses: actions/download-artifact@v4
        with:
          name: ns-many-seed
          path: ${{ env.ROOT_DIR }}/many/${{ env.NSCLOUD_DIR }}

      - name: Measure NSCLOUD "restore" time (many)
        id: measure_ns_many
        run: |
          set -euo pipefail
          t0=$(date +%s%N)
          test "$(find "$ROOT_DIR/many/$NSCLOUD_DIR" -type f | wc -l)" -gt 0
          t1=$(date +%s%N)
          du -s --block-size=1 "$ROOT_DIR/many/$NSCLOUD_DIR" | awk '{print "bytes="$1}' >> "$GITHUB_OUTPUT"
          echo "ms=$(( (t1 - t0)/1000000 ))" >> "$GITHUB_OUTPUT"
          find "$ROOT_DIR/many/$NSCLOUD_DIR" -type f | wc -l | awk '{print "files="$1}' >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Save results
        run: |
          printf '{"scenario":"many","impl":"nscloud","restore_ms":%s,"files":%s,"bytes":%s}\n' \
            "${{ steps.measure_ns_many.outputs.ms }}" \
            "${{ steps.measure_ns_many.outputs.files }}" \
            "${{ steps.measure_ns_many.outputs.bytes }}" \
            > results-many-nscloud.json
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: results-many-nscloud
          path: results-many-nscloud.json
