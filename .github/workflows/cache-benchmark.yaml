name: Cache Benchmark

on:
  push:
    branches: [sp/cache-benchmark]
  workflow_dispatch:

env:
  ROOT_DIR: bench
  LARGE_SIZE_MB: "2048"
  SMALL_COUNT: "100000"
  SMALL_SIZE_BYTES: "4096"
  SALT: "v4"

jobs:
  # ─────────────────────────────────────────────────────────────────────
  # Namespace cache – LARGE
  # ─────────────────────────────────────────────────────────────────────
  nscloud-cache-large:
    runs-on: namespace-profile-cache-test
    env:
      DIR: large
    steps:
      - name: Prepare directory
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ROOT_DIR/$DIR"

      - name: Attach nscloud cache volume
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: ${{ env.ROOT_DIR }}/${{ env.DIR }}

      - name: Check if files exist
        id: check
        shell: bash
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/$DIR"
          count=$(find "$dir" -type f | wc -l || true)
          bytes=$(du -s --block-size=1 "$dir" | cut -f1 || echo 0)
          echo "files=$count"  >> "$GITHUB_OUTPUT"
          echo "bytes=$bytes" >> "$GITHUB_OUTPUT"

      - name: Generate large file (NSCLOUD)
        id: generate
        if: ${{ steps.check.outputs.files == '0' }}
        shell: bash
        run: |
          set -euo pipefail
          dd if=/dev/urandom of="$ROOT_DIR/$DIR/large.bin" bs=1M count="$LARGE_SIZE_MB" status=none

      - name: Write job summary
        shell: bash
        run: |
          set -euo pipefail

          # Decide whether we generated or reused the cache
          if [[ "${{ steps.generate.outcome }}" == "success" ]]; then
            status="Generated fresh data :sparkles:"
          else
            status="Used cached data :package:"
          fi

          # Re-measure (post-generation, so it’s accurate)
          files=$(find "$ROOT_DIR/$DIR" -type f | wc -l || echo 0)
          bytes=$(du -s --block-size=1 "$ROOT_DIR/$DIR" | cut -f1 || echo 0)

          echo "### Cache-benchmark summary"             >> $GITHUB_STEP_SUMMARY
          echo ""                                        >> $GITHUB_STEP_SUMMARY
          echo "- **Job:** \`${{ github.job }}\`"        >> $GITHUB_STEP_SUMMARY
          echo "- **Directory:** \`$ROOT_DIR/$DIR\`"     >> $GITHUB_STEP_SUMMARY
          echo "- **Files now:** \`$files\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Bytes now:** \`$bytes\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $status"                   >> $GITHUB_STEP_SUMMARY

  # ─────────────────────────────────────────────────────────────────────
  # Namespace cache – MANY
  # ─────────────────────────────────────────────────────────────────────
  nscloud-cache-many:
    runs-on: namespace-profile-cache-test
    env:
      DIR: many
    steps:
      - name: Prepare directory
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ROOT_DIR/$DIR"

      - name: Attach nscloud cache volume
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: ${{ env.ROOT_DIR }}/${{ env.DIR }}

      - name: Check if files exist
        id: check
        shell: bash
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/$DIR"
          count=$(find "$dir" -type f | wc -l || true)
          bytes=$(du -s --block-size=1 "$dir" | cut -f1 || echo 0)
          echo "files=$count"  >> "$GITHUB_OUTPUT"
          echo "bytes=$bytes" >> "$GITHUB_OUTPUT"

      - name: Generate many small files (NSCLOUD)
        id: generate
        if: ${{ steps.check.outputs.files != env.SMALL_COUNT }}
        shell: bash
        run: |
          set -euo pipefail
          for i in $(seq 1 "$SMALL_COUNT"); do
            dd if=/dev/urandom of="$ROOT_DIR/$DIR/file_$i.bin" bs="$SMALL_SIZE_BYTES" count=1 status=none
          done

      - name: Verify files
        shell: bash
        run: |
          ls -1 "$ROOT_DIR/$DIR" | wc -l

      - name: Write job summary
        shell: bash
        run: |
          set -euo pipefail

          # Decide whether we generated or reused the cache
          if [[ "${{ steps.generate.outcome }}" == "success" ]]; then
            status="Generated fresh data :sparkles:"
          else
            status="Used cached data :package:"
          fi

          # Re-measure (post-generation, so it’s accurate)
          files=$(find "$ROOT_DIR/$DIR" -type f | wc -l || echo 0)
          bytes=$(du -s --block-size=1 "$ROOT_DIR/$DIR" | cut -f1 || echo 0)

          echo "### Cache-benchmark summary"             >> $GITHUB_STEP_SUMMARY
          echo ""                                        >> $GITHUB_STEP_SUMMARY
          echo "- **Job:** \`${{ github.job }}\`"        >> $GITHUB_STEP_SUMMARY
          echo "- **Directory:** \`$ROOT_DIR/$DIR\`"     >> $GITHUB_STEP_SUMMARY
          echo "- **Files now:** \`$files\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Bytes now:** \`$bytes\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $status"                   >> $GITHUB_STEP_SUMMARY

  # ─────────────────────────────────────────────────────────────────────
  # GitHub Actions cache – LARGE
  # ─────────────────────────────────────────────────────────────────────
  actions-cache-large:
    runs-on: ubuntu-latest
    env:
      DIR: large
    steps:
      - name: Prepare directory
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ROOT_DIR/$DIR"

      - name: Cache directory (ACTIONS)
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ROOT_DIR }}/${{ env.DIR }}
          key: large-actions-${{ runner.os }}-${{ env.LARGE_SIZE_MB }}mb-${{ env.SALT }}

      - name: Check if files exist
        id: check
        shell: bash
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/$DIR"
          count=$(find "$dir" -type f | wc -l || true)
          bytes=$(du -s --block-size=1 "$dir" | cut -f1 || echo 0)
          echo "files=$count"  >> "$GITHUB_OUTPUT"
          echo "bytes=$bytes" >> "$GITHUB_OUTPUT"

      - name: Generate large file (ACTIONS)
        id: generate
        if: ${{ steps.check.outputs.files == '0' }}
        shell: bash
        run: |
          set -euo pipefail
          dd if=/dev/urandom of="$ROOT_DIR/$DIR/large.bin" bs=1M count="$LARGE_SIZE_MB" status=none

      - name: Write job summary
        shell: bash
        run: |
          set -euo pipefail

          # Decide whether we generated or reused the cache
          if [[ "${{ steps.generate.outcome }}" == "success" ]]; then
            status="Generated fresh data :sparkles:"
          else
            status="Used cached data :package:"
          fi

          # Re-measure (post-generation, so it’s accurate)
          files=$(find "$ROOT_DIR/$DIR" -type f | wc -l || echo 0)
          bytes=$(du -s --block-size=1 "$ROOT_DIR/$DIR" | cut -f1 || echo 0)

          echo "### Cache-benchmark summary"             >> $GITHUB_STEP_SUMMARY
          echo ""                                        >> $GITHUB_STEP_SUMMARY
          echo "- **Job:** \`${{ github.job }}\`"        >> $GITHUB_STEP_SUMMARY
          echo "- **Directory:** \`$ROOT_DIR/$DIR\`"     >> $GITHUB_STEP_SUMMARY
          echo "- **Files now:** \`$files\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Bytes now:** \`$bytes\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $status"                   >> $GITHUB_STEP_SUMMARY

  # ─────────────────────────────────────────────────────────────────────
  # GitHub Actions cache – MANY
  # ─────────────────────────────────────────────────────────────────────
  actions-cache-many:
    runs-on: ubuntu-latest
    env:
      DIR: many
    steps:
      - name: Prepare directory
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ROOT_DIR/$DIR"

      - name: Cache directory (ACTIONS)
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ROOT_DIR }}/${{ env.DIR }}
          key: many-actions-${{ runner.os }}-${{ env.SMALL_COUNT }}x${{ env.SMALL_SIZE_BYTES }}-${{ env.SALT }}

      - name: Check if files exist
        id: check
        shell: bash
        run: |
          set -euo pipefail
          dir="$ROOT_DIR/$DIR"
          count=$(find "$dir" -type f | wc -l || true)
          bytes=$(du -s --block-size=1 "$dir" | cut -f1 || echo 0)
          echo "files=$count"  >> "$GITHUB_OUTPUT"
          echo "bytes=$bytes" >> "$GITHUB_OUTPUT"

      - name: Generate many small files (ACTIONS)
        id: generate
        if: ${{ steps.check.outputs.files == '0' }}
        shell: bash
        run: |
          set -euo pipefail
          for i in $(seq 1 "$SMALL_COUNT"); do
            dd if=/dev/urandom of="$ROOT_DIR/$DIR/file_$i.bin" bs="$SMALL_SIZE_BYTES" count=1 status=none
          done

      - name: Write job summary
        shell: bash
        run: |
          set -euo pipefail

          # Decide whether we generated or reused the cache
          if [[ "${{ steps.generate.outcome }}" == "success" ]]; then
            status="Generated fresh data :sparkles:"
          else
            status="Used cached data :package:"
          fi

          # Re-measure (post-generation, so it’s accurate)
          files=$(find "$ROOT_DIR/$DIR" -type f | wc -l || echo 0)
          bytes=$(du -s --block-size=1 "$ROOT_DIR/$DIR" | cut -f1 || echo 0)

          echo "### Cache-benchmark summary"             >> $GITHUB_STEP_SUMMARY
          echo ""                                        >> $GITHUB_STEP_SUMMARY
          echo "- **Job:** \`${{ github.job }}\`"        >> $GITHUB_STEP_SUMMARY
          echo "- **Directory:** \`$ROOT_DIR/$DIR\`"     >> $GITHUB_STEP_SUMMARY
          echo "- **Files now:** \`$files\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Bytes now:** \`$bytes\`"             >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $status"                   >> $GITHUB_STEP_SUMMARY
